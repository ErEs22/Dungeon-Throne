//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""9d5c0152-bcf3-4d6e-8e93-2021c93c965e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5ad632b7-4025-43ac-b0f3-0b8094d54618"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""ec3818b1-da43-45d1-8ebf-8ab4549d002a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ded1e71e-dc3b-45ac-8875-7a3c448da648"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""44491ab2-a6e0-4e67-aa1d-300e463e4301"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1e66c2a0-d5bf-4234-bef8-69a9c35932c8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8db15d41-2ff4-411f-bccd-a227a6a822de"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a0ef2da4-ee2d-4d9f-9a52-16ad531cc7c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""10c81d46-9fc6-4f1e-8bae-f443b024c7e4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3b6a7aee-fb0f-4953-95ca-d43bf5045315"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02f8b025-33d1-4f86-b748-ee6a10daed79"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAttack"",
            ""id"": ""0477a036-09f9-40cf-a339-45c51bfcee13"",
            ""actions"": [
                {
                    ""name"": ""LightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""df34060a-fd44-495e-bee5-d69fdb2f9576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyAttack"",
                    ""type"": ""Button"",
                    ""id"": ""02331233-eca9-4dba-95b2-e6fd7dc560af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fdaeae09-e90c-481a-a0a9-8bf7be22cf06"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82d435d1-b564-4827-9456-c1a5de7fa046"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea18ad19-4eba-42ef-90bd-9bc6cc7a7c25"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b30f4ee6-0dff-49a3-8a44-bee7c8d17e12"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerGameActions"",
            ""id"": ""be15c8eb-5ffd-4ac9-8917-eb651c2e9732"",
            ""actions"": [
                {
                    ""name"": ""Collect"",
                    ""type"": ""Button"",
                    ""id"": ""52fe8fa9-3617-4ce0-90ee-cca879595483"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseComsumable"",
                    ""type"": ""Button"",
                    ""id"": ""923be35b-c94b-46ac-a50c-64798dac28c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""11dcb260-b8bf-45b0-af17-9cb5aedcb55d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""621ecb1c-87da-4a29-87e7-73886718a137"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a2cb5f8-5954-43eb-96dd-005a997dc155"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""300953c6-174b-4902-a680-678b7d956ae3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseComsumable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df69463e-d83a-406b-82cd-72c9e1a1132a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseComsumable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c0b4479-a3ba-4928-9af5-706860613bd5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b68ba9bd-a484-4999-8e0c-a3c853972e32"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameUI"",
            ""id"": ""579ffa0f-b950-4113-9aae-40ff1b4a4643"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""6ecb2cc4-577d-40ea-aba9-500bb5b49885"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""acabfa99-3a09-4936-8873-9f425ce14964"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""faa2d4f3-183b-444d-90fa-759359b3efe2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GamePause"",
            ""id"": ""75739c78-37b6-454c-821c-65f88a1da707"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""c72899af-ee95-40d4-98a2-e708c32ecfb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a6004d4-c1db-4d86-97f2-12dd0ae943d3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""215704b3-d79a-49b2-94af-f2cce4175d57"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Move = m_PlayerMovement.FindAction("Move", throwIfNotFound: true);
        m_PlayerMovement_Roll = m_PlayerMovement.FindAction("Roll", throwIfNotFound: true);
        // PlayerAttack
        m_PlayerAttack = asset.FindActionMap("PlayerAttack", throwIfNotFound: true);
        m_PlayerAttack_LightAttack = m_PlayerAttack.FindAction("LightAttack", throwIfNotFound: true);
        m_PlayerAttack_HeavyAttack = m_PlayerAttack.FindAction("HeavyAttack", throwIfNotFound: true);
        // PlayerGameActions
        m_PlayerGameActions = asset.FindActionMap("PlayerGameActions", throwIfNotFound: true);
        m_PlayerGameActions_Collect = m_PlayerGameActions.FindAction("Collect", throwIfNotFound: true);
        m_PlayerGameActions_UseComsumable = m_PlayerGameActions.FindAction("UseComsumable", throwIfNotFound: true);
        m_PlayerGameActions_Pause = m_PlayerGameActions.FindAction("Pause", throwIfNotFound: true);
        // GameUI
        m_GameUI = asset.FindActionMap("GameUI", throwIfNotFound: true);
        m_GameUI_Inventory = m_GameUI.FindAction("Inventory", throwIfNotFound: true);
        // GamePause
        m_GamePause = asset.FindActionMap("GamePause", throwIfNotFound: true);
        m_GamePause_Resume = m_GamePause.FindAction("Resume", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Move;
    private readonly InputAction m_PlayerMovement_Roll;
    public struct PlayerMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMovement_Move;
        public InputAction @Roll => m_Wrapper.m_PlayerMovement_Roll;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMove;
                @Roll.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRoll;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerAttack
    private readonly InputActionMap m_PlayerAttack;
    private IPlayerAttackActions m_PlayerAttackActionsCallbackInterface;
    private readonly InputAction m_PlayerAttack_LightAttack;
    private readonly InputAction m_PlayerAttack_HeavyAttack;
    public struct PlayerAttackActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerAttackActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightAttack => m_Wrapper.m_PlayerAttack_LightAttack;
        public InputAction @HeavyAttack => m_Wrapper.m_PlayerAttack_HeavyAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAttackActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAttackActions instance)
        {
            if (m_Wrapper.m_PlayerAttackActionsCallbackInterface != null)
            {
                @LightAttack.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnLightAttack;
                @LightAttack.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnLightAttack;
                @LightAttack.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnLightAttack;
                @HeavyAttack.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnHeavyAttack;
                @HeavyAttack.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnHeavyAttack;
            }
            m_Wrapper.m_PlayerAttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LightAttack.started += instance.OnLightAttack;
                @LightAttack.performed += instance.OnLightAttack;
                @LightAttack.canceled += instance.OnLightAttack;
                @HeavyAttack.started += instance.OnHeavyAttack;
                @HeavyAttack.performed += instance.OnHeavyAttack;
                @HeavyAttack.canceled += instance.OnHeavyAttack;
            }
        }
    }
    public PlayerAttackActions @PlayerAttack => new PlayerAttackActions(this);

    // PlayerGameActions
    private readonly InputActionMap m_PlayerGameActions;
    private IPlayerGameActionsActions m_PlayerGameActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerGameActions_Collect;
    private readonly InputAction m_PlayerGameActions_UseComsumable;
    private readonly InputAction m_PlayerGameActions_Pause;
    public struct PlayerGameActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerGameActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Collect => m_Wrapper.m_PlayerGameActions_Collect;
        public InputAction @UseComsumable => m_Wrapper.m_PlayerGameActions_UseComsumable;
        public InputAction @Pause => m_Wrapper.m_PlayerGameActions_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGameActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGameActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGameActionsActions instance)
        {
            if (m_Wrapper.m_PlayerGameActionsActionsCallbackInterface != null)
            {
                @Collect.started -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnCollect;
                @Collect.performed -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnCollect;
                @Collect.canceled -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnCollect;
                @UseComsumable.started -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnUseComsumable;
                @UseComsumable.performed -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnUseComsumable;
                @UseComsumable.canceled -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnUseComsumable;
                @Pause.started -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerGameActionsActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PlayerGameActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Collect.started += instance.OnCollect;
                @Collect.performed += instance.OnCollect;
                @Collect.canceled += instance.OnCollect;
                @UseComsumable.started += instance.OnUseComsumable;
                @UseComsumable.performed += instance.OnUseComsumable;
                @UseComsumable.canceled += instance.OnUseComsumable;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PlayerGameActionsActions @PlayerGameActions => new PlayerGameActionsActions(this);

    // GameUI
    private readonly InputActionMap m_GameUI;
    private IGameUIActions m_GameUIActionsCallbackInterface;
    private readonly InputAction m_GameUI_Inventory;
    public struct GameUIActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameUIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_GameUI_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_GameUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameUIActions set) { return set.Get(); }
        public void SetCallbacks(IGameUIActions instance)
        {
            if (m_Wrapper.m_GameUIActionsCallbackInterface != null)
            {
                @Inventory.started -= m_Wrapper.m_GameUIActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_GameUIActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_GameUIActionsCallbackInterface.OnInventory;
            }
            m_Wrapper.m_GameUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
            }
        }
    }
    public GameUIActions @GameUI => new GameUIActions(this);

    // GamePause
    private readonly InputActionMap m_GamePause;
    private IGamePauseActions m_GamePauseActionsCallbackInterface;
    private readonly InputAction m_GamePause_Resume;
    public struct GamePauseActions
    {
        private @PlayerInputActions m_Wrapper;
        public GamePauseActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Resume => m_Wrapper.m_GamePause_Resume;
        public InputActionMap Get() { return m_Wrapper.m_GamePause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePauseActions set) { return set.Get(); }
        public void SetCallbacks(IGamePauseActions instance)
        {
            if (m_Wrapper.m_GamePauseActionsCallbackInterface != null)
            {
                @Resume.started -= m_Wrapper.m_GamePauseActionsCallbackInterface.OnResume;
                @Resume.performed -= m_Wrapper.m_GamePauseActionsCallbackInterface.OnResume;
                @Resume.canceled -= m_Wrapper.m_GamePauseActionsCallbackInterface.OnResume;
            }
            m_Wrapper.m_GamePauseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
            }
        }
    }
    public GamePauseActions @GamePause => new GamePauseActions(this);
    public interface IPlayerMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
    public interface IPlayerAttackActions
    {
        void OnLightAttack(InputAction.CallbackContext context);
        void OnHeavyAttack(InputAction.CallbackContext context);
    }
    public interface IPlayerGameActionsActions
    {
        void OnCollect(InputAction.CallbackContext context);
        void OnUseComsumable(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IGameUIActions
    {
        void OnInventory(InputAction.CallbackContext context);
    }
    public interface IGamePauseActions
    {
        void OnResume(InputAction.CallbackContext context);
    }
}
